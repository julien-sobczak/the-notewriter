package core

import (
	"bytes"
	"strings"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestParsing(t *testing.T) {

	t.Run("Tags & Attributes", func(t *testing.T) {
		var tests = []struct {
			name       string
			content    string                 // Input
			tags       []string               // Output
			attributes map[string]interface{} // Output
		}{
			{
				name: "Only tags",
				content: `
## Note: Only tags

”#favorite” ”#life-changing” ”#0Aa-1Bb”
`,
				tags: []string{"favorite", "life-changing", `0Aa-1Bb`},
				attributes: map[string]interface{}{
					"tags":  []interface{}{"favorite", "life-changing", `0Aa-1Bb`},
					"title": "Only tags",
				},
			},

			{
				name: "Only attributes",
				content: `
## Note: Only attributes

”@isbn: 9780807014271” ”@name: Viktor Frankl” ”@source: https://en.wikipedia.org/wiki/Man%27s_Search_for_Meaning”
`,
				tags: nil,
				attributes: map[string]interface{}{
					"isbn":   "9780807014271",
					"name":   "Viktor Frankl",
					"source": "https://en.wikipedia.org/wiki/Man%27s_Search_for_Meaning",
					"title":  "Only attributes",
				},
			},

			{
				name: "Mixed on single lines",
				content: `
## Note: Mixed on single lines

”#favorite” ”@isbn: 9780807014271” ”#life-changing” ”@name: Viktor Frankl”
`,
				tags: []string{"favorite", "life-changing"},
				attributes: map[string]interface{}{
					"isbn":  "9780807014271",
					"name":  "Viktor Frankl",
					"tags":  []interface{}{"favorite", "life-changing"},
					"title": "Mixed on single lines",
				},
			},

			{
				name: "Mixed on different lines",
				content: `
## Note: Mixed on different lines

”#favorite” ”#life-changing”
”@isbn: 9780807014271” ”@name: Viktor Frankl”
`,
				tags: []string{"favorite", "life-changing"},
				attributes: map[string]interface{}{
					"isbn":  "9780807014271",
					"name":  "Viktor Frankl",
					"tags":  []interface{}{"favorite", "life-changing"},
					"title": "Mixed on different lines",
				},
			},

			{
				name: "Array Types",
				content: `
## Note: Array Types

”@references: [[fileA]]”
”@references: [[fileB#Section]]”
`,
				tags: []string{},
				attributes: map[string]interface{}{
					"references": []interface{}{
						"[[fileA]]",
						"[[fileB#Section]]",
					},
					"title": "Array Types",
				},
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				SetUpRepositoryFromTempDir(t)

				// Preconditions
				schemasTypes := GetSchemaAttributeTypes()
				require.Equal(t, "string[]", schemasTypes["references"])

				file := NewEmptyFile("tags-attributes.md")
				parsedNote := MustParseNote(UnescapeTestContent(tt.content), "")
				actual := NewNote(file, nil, parsedNote)
				if len(tt.tags) == 0 {
					tt.tags = nil
				}
				if len(actual.Tags) == 0 {
					actual.Tags = nil
				}
				if len(tt.attributes) == 0 {
					tt.attributes = nil
				}
				if len(actual.Attributes) == 0 {
					actual.Attributes = nil
				}
				assert.EqualValues(t, tt.tags, actual.Tags)
				assert.EqualValues(t, tt.attributes, actual.Attributes)
			})
		}
	})

	t.Run("Markdown Syntaxic Sugar", func(t *testing.T) {
		var tests = []struct {
			name     string
			content  string // Input
			expected string // Output
			strict   bool   // Output
		}{

			{
				name: "Note: Basic",
				content: `
## Note: Basic

This is a **basic, multiline note**
that says nothing _interesting_.`,
				// Nothing to do
				expected: `
This is a **basic, multiline note**
that says nothing _interesting_.`,
			},

			{
				name: "Quote: without author",
				content: `
## Quote: without author

We are all born ignorant, but one must work
hard to remain stupid.`,
				// Prefix line with quotation syntax
				expected: `
> We are all born ignorant, but one must work
> hard to remain stupid.`,
			},

			{
				name: "Quote: with author",
				content: `
## Quote: with author

”@name: Henry Ford”

Quality means doing it right when no one is looking.
`,
				// Append the author after the quotation
				expected: `
> Quality means doing it right when no one is looking.
> — Henry Ford`,
			},

			{
				name: "Quote: with tags",
				content: `
## Quote: with tags

”#favorite” ”#life”
Action is a necessary part of success.
”#todo”
`,
				// Strip tags
				expected: "> Action is a necessary part of success.",
				strict:   true,
			},

			{
				name: "Quote: With attribute",
				content: `
## Quote: With attribute

”@source: https://jamesclear.com/3-2-1/july-14-2022”
”@author: James Clear”

Knowledge is making the right choice with all the information.
Wisdom is making the right choice without all the information.
`,
				// Strip attributes
				expected: "> Knowledge is making the right choice with all the information.\n> Wisdom is making the right choice without all the information.\n> — James Clear",
				strict:   true,
			},
		}
		for _, tt := range tests {
			t.Run(tt.name, func(t *testing.T) {
				SetUpRepositoryFromTempDir(t)
				file := NewEmptyFile("example.md")
				parsedNote := MustParseNote(UnescapeTestContent(tt.content), "")
				actual := NewNote(file, nil, parsedNote)
				if tt.strict {
					assert.Equal(t, tt.expected, actual.ContentMarkdown)
				} else {
					assert.Equal(t, strings.TrimSpace(tt.expected), strings.TrimSpace(actual.ContentMarkdown))
				}
			})
		}
	})

}
