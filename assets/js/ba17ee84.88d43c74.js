"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2309],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>k});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=a(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,k=c["".concat(l,".").concat(m)]||c[m]||d[m]||r;return n?o.createElement(k,s(s({ref:t},u),{},{components:n})):o.createElement(k,s({ref:t},u))}));function k(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=m;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[c]="string"==typeof e?e:i,s[1]=a;for(var p=2;p<r;p++)s[p]=n[p];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5665:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>a,toc:()=>p});var o=n(7462),i=(n(7294),n(3905));const r={sidebar_position:3},s="Hooks",a={unversionedId:"guides/hooks",id:"guides/hooks",title:"Hooks",description:"Hooks allow you to run custom script before a note is committed.",source:"@site/docs/guides/hooks.md",sourceDirName:"guides",slug:"/guides/hooks",permalink:"/the-notewriter/docs/guides/hooks",draft:!1,editUrl:"https://github.com/julien-sobczak/the-notewriter/tree/main/website/docs/guides/hooks.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"documentationSidebar",previous:{title:"Attributes",permalink:"/the-notewriter/docs/guides/attributes"},next:{title:"Medias",permalink:"/the-notewriter/docs/guides/medias"}},l={},p=[{value:"Syntax",id:"syntax",level:2},{value:"Run",id:"run",level:2},{value:"Example",id:"example",level:2}],u={toc:p},c="wrapper";function d(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hooks"},"Hooks"),(0,i.kt)("p",null,"Hooks allow you to run custom script before a note is committed."),(0,i.kt)("h2",{id:"syntax"},"Syntax"),(0,i.kt)("p",null,"Hooks are declared using the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"hook"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=todo.md",title:"todo.md"},"## TODO: Reading List\n\n`@hook: gist`\n\n* [*] _Limitless_, by Jim Kwik\n* [*] _Tribe of Mentors_, by Tim Ferris\n")),(0,i.kt)("p",null,"Just before a new commit is created, ",(0,i.kt)("em",{parentName:"p"},"The NoteWriter")," will try to execute the hook by looking for an ",(0,i.kt)("strong",{parentName:"p"},"executable")," filename (ignoring the extension) present in ",(0,i.kt)("inlineCode",{parentName:"p"},".nt/hooks")," (ex: ",(0,i.kt)("inlineCode",{parentName:"p"},"gist.py"),")."),(0,i.kt)("p",null,"You can use any language to write your hooks. The JSON representation of the note is available on stdin:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "oid": "16252daf",\n    "relativePath": "todo.md",\n    "wikilink": "#TODO: Reading List",\n    "attributes": {\n     "title": "Reading List",\n     "hook": "gist",\n    },\n    "shortTitleRaw": "Reading List",\n    "shortTitleMarkdown": "Reading List",\n    "shortTitleHTML": "Reading List",\n    "shortTitleText": "Reading List",\n    "contentRaw": "* [*] _Limitless_, by Jim Kwik\\n* [*] _Tribe of Mentors_, by Tim Ferris",\n    "contentMarkdown": "* [*] _Limitless_, by Jim Kwik\\n* [*] _Tribe of Mentors_, by Tim Ferris",\n    "contentHTML": "<ul>\\n<li>[*] <em>Limitless</em>, by Jim Kwik</li>\\n<li>[ ] <em>Tribe of Mentors</em>, by Tim Ferris</li>\\n</ul>",\n    "contentText": "* [*] _Limitless_, by Jim Kwik\\n* [*] _Tribe of Mentors_, by Tim Ferris",\n}\n')),(0,i.kt)("h2",{id:"run"},"Run"),(0,i.kt)("p",null,"Hooks are automatically triggered when commiting changes using the comand ",(0,i.kt)("inlineCode",{parentName:"p"},"nt commit"),"."),(0,i.kt)("p",null,"Sometimes, you may want to run a hook manually (useful when developing new hooks). The command ",(0,i.kt)("inlineCode",{parentName:"p"},"nt run-hook")," allows to execute a hook on a single note (you still need to use ",(0,i.kt)("inlineCode",{parentName:"p"},"nt add")," to place the note in the index)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},'$ nt run-hook --vvv "todo.md#Reference: Reading List"\n')),(0,i.kt)("h2",{id:"example"},"Example"),(0,i.kt)("p",null,"Let's write the hook ",(0,i.kt)("inlineCode",{parentName:"p"},"gist")," that synchronize the note content (usually stored in a private GitHub repository) with a Gist that can be freely share."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=todo.md",title:"todo.md"},"## TODO: Reading List\n\n`@hook: gist`\n\n* [*] _Limitless_, by Jim Kwik\n* [*] _Tribe of Mentors_, by Tim Ferris\n")),(0,i.kt)("p",null,"Here is an example of hook written in Python:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-py",metastring:"title=.nt/hooks/gist.py",title:".nt/hooks/gist.py"},'#!/usr/bin/env python\n"""\nThis script uses the GitHub API to create gists from a note.\n\nNote: The script expect an environment variable $GITHUB_GIST_TOKEN to be defined (ex: ~/.bashrc).\n"""\n\nimport sys\nimport os\nimport fileinput\nimport json\nimport requests\n\nclass GistClient:\n\n    def __init__(self, token):\n        self.api_url = "https://api.github.com/gists"\n        self.token = token\n\n    def create_gist(self, description, filename, content):\n        request = json.dumps({\n            \'description\': description,\n            \'public\': False, # Not really secret, share the link\n            \'files\': {\n                filename: {\n                    \'content\': content,\n                },\n            },\n        })\n        response  = requests.post(self.api_url, headers={\n            "Accept": "application/vnd.github+json",\n            "Authorization": f"Bearer {self.token}",\n            "X-GitHub-Api-Version": "2022-11-28",\n        }, data=request)\n        if not response.ok:\n            print(f"Unable to create Gist due to code {response.status_code}",\n              file=sys.stderr)\n            os._exit(1)\n\nif __name__ == "__main__":\n\n    # Step 0: Check secrets\n    api_token = os.environ.get(\'GITHUB_GIST_TOKEN\')\n    if not api_token:\n        print("Missing env variable $GITHUB_GIST_TOKEN", file=sys.stderr)\n        os._exit(1)\n\n    github = GistClient(api_token)\n\n    # Step 1: Read input note\n    note_str = ""\n    for line in fileinput.input():\n        note_str += line\n    note = json.loads(note_str)\n\n    # Step 2: Create the gist\n    print(f\'Creating gist from note {note["shortTitleText"]}...\', file=sys.stderr)\n    github.create_gist(note["shortTitleText"], "note.md", note["contentMarkdown"])\n')),(0,i.kt)("p",null,"This hook is incomplete. Hooks must be idempotent as you don't want to create a new Gist every time the note is edited. But you now have a good idea of how hooks work."))}d.isMDXComponent=!0}}]);