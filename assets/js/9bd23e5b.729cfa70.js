"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1181],{3905:(e,n,t)=>{t.d(n,{Zo:()=>m,kt:()=>g});var a=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),u=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=u(e.components);return a.createElement(s.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},k=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=u(t),k=i,g=d["".concat(s,".").concat(k)]||d[k]||p[k]||l;return t?a.createElement(g,r(r({ref:n},m),{},{components:t})):a.createElement(g,r({ref:n},m))}));function g(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=t.length,r=new Array(l);r[0]=k;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o[d]="string"==typeof e?e:i,r[1]=o;for(var u=2;u<l;u++)r[u]=t[u];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}k.displayName="MDXCreateElement"},6071:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=t(7462),i=(t(7294),t(3905));const l={sidebar_position:4},r="Linter",o={unversionedId:"guides/linter",id:"guides/linter",title:"Linter",description:"The linter enforces rules on your notes to ensure their syntax is consistent and makes easy to find them later. It's particularly interesting as your collection of notes grows over time.",source:"@site/docs/guides/linter.md",sourceDirName:"guides",slug:"/guides/linter",permalink:"/the-notewriter/docs/guides/linter",draft:!1,editUrl:"https://github.com/julien-sobczak/the-notewriter/tree/main/website/docs/guides/linter.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"documentationSidebar",previous:{title:"Medias",permalink:"/the-notewriter/docs/guides/medias"},next:{title:"Flashcards",permalink:"/the-notewriter/docs/guides/flashcards"}},s={},u=[{value:"Configuration",id:"configuration",level:2},{value:"Rules",id:"rules",level:2},{value:"<code>no-duplicate-note-title</code>",id:"no-duplicate-note-title",level:3},{value:"<code>no-duplicate-slug</code>",id:"no-duplicate-slug",level:3},{value:"<code>min-lines-between-notes</code>",id:"min-lines-between-notes",level:3},{value:"<code>max-lines-between-notes</code>",id:"max-lines-between-notes",level:3},{value:"<code>note-title-match</code>",id:"note-title-match",level:3},{value:"<code>no-free-note</code>",id:"no-free-note",level:3},{value:"<code>no-dangling-media</code>",id:"no-dangling-media",level:3},{value:"<code>no-dead-wikilink</code>",id:"no-dead-wikilink",level:3},{value:"<code>no-extension-wikilink</code>",id:"no-extension-wikilink",level:3},{value:"<code>no-ambiguous-wikilink</code>",id:"no-ambiguous-wikilink",level:3},{value:"<code>require-quote-tag</code>",id:"require-quote-tag",level:3},{value:"<code>check-attribute</code>",id:"check-attribute",level:3},{value:"Schemas",id:"schemas",level:2}],m={toc:u},d="wrapper";function p(e){let{components:n,...t}=e;return(0,i.kt)(d,(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"linter"},"Linter"),(0,i.kt)("p",null,"The linter enforces rules on your notes to ensure their syntax is consistent and makes easy to find them later. It's particularly interesting as your collection of notes grows over time."),(0,i.kt)("h2",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"The linter reads its configuration from the YAML file ",(0,i.kt)("inlineCode",{parentName:"p"},".nt/lint"),". No file exists by default. Ex:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"rules:\n- name: min-lines-between-notes\n  args: [2]\n- name: no-free-note\n  includes:\n  - references/\n- name: no-dangling-media\n- name: no-dead-wikilink\n")),(0,i.kt)("p",null,"Rules are declared under the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"rules"),". Some rules accept arguments using the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"args")," (array of primitive values) and all rules can be restricted to apply on a subset of your notes using the attribute ",(0,i.kt)("inlineCode",{parentName:"p"},"includes")," (array of glob path expressions)."),(0,i.kt)("h2",{id:"rules"},"Rules"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Rule"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"),(0,i.kt)("th",{parentName:"tr",align:null},"Arguments"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-duplicate-note-title")),(0,i.kt)("td",{parentName:"tr",align:null},"Enforce no duplicate between note titles inside the same file"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-duplicate-slug")),(0,i.kt)("td",{parentName:"tr",align:null},"Enforce no duplicate slugs between notes across files"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"min-lines-between-notes")),(0,i.kt)("td",{parentName:"tr",align:null},"Enforce a minimum number of lines between notes"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("code",null,"int")," The number of lines")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"max-lines-between-notes")),(0,i.kt)("td",{parentName:"tr",align:null},"Enforce a maximum number of lines between notes"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("code",null,"int")," The number of lines")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"note-title-match")),(0,i.kt)("td",{parentName:"tr",align:null},"Enforce a consistent naming for notes"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("code",null,"string")," A Golang regex")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-free-note")),(0,i.kt)("td",{parentName:"tr",align:null},"Forbid untyped notes"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-dangling-media")),(0,i.kt)("td",{parentName:"tr",align:null},"Path to media files must exist"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-dead-wikilink")),(0,i.kt)("td",{parentName:"tr",align:null},"Links between notes must exist"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-extension-wikilink")),(0,i.kt)("td",{parentName:"tr",align:null},"No extension in wikilinks"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"no-ambiguous-wikilink")),(0,i.kt)("td",{parentName:"tr",align:null},"No ambiguity in wikilinks"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"require-quote-tag")),(0,i.kt)("td",{parentName:"tr",align:null},"At least one tag on quotes (must match the optional pattern)"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("ul",null,(0,i.kt)("li",null,(0,i.kt)("code",null,"string")," A regex that must match all accepted tags on quotes")))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"check-attribute")),(0,i.kt)("td",{parentName:"tr",align:null},"Attributes must satisfy their schema if defined (see below)"),(0,i.kt)("td",{parentName:"tr",align:null},"-")))),(0,i.kt)("h3",{id:"no-duplicate-note-title"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-duplicate-note-title")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-duplicate-note-title\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{15}","{15}":!0},"# Example\n\n## Note: The same title is allowed on different kinds\n\nThis is a note.\n\n### Flashcard: The same title is allowed on different kinds\n\nThis is a flashcard.\n\n## Note: Long title must be unique inside a file\n\nThis is a note.\n\n## Note: Long title must be unique inside a file\n\nThis is a note with the same title.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-duplicate-note-title")," to ensure internal links are not ambiguous.")),(0,i.kt)("h3",{id:"no-duplicate-slug"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-duplicate-slug")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-duplicate-slug\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{11,17}","{11,17}":!0},"# Example\n\n## Note: The slug attribute is supported\n\n`@slug: note1`\n\nThis is a note.\n\n### Note: The same slug cannot be reused\n\n`@slug: note1`\n\nThis is a note.\n\n## Note: Slugs must be compatible with URLs\n\n`@slug: not a valid slug`\n\nThis is a note.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-duplicate-slug")," to ensure slugs can be used in URLs and match only a single note.")),(0,i.kt)("h3",{id:"min-lines-between-notes"},(0,i.kt)("inlineCode",{parentName:"h3"},"min-lines-between-notes")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: min-lines-between-notes\n  args:\n  - 2\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{7,15}","{7,15}":!0},"# Example\n\n## Note: One\n\nThis is the first note.\n\n## Note: Two\n\nThis is the second note.\n\n\n## Note: Three\n\nThis is the third note.\n## Note: Four\nThis is the fourth note.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"min-lines-between-notes")," to force spaces between your notes to make editing easier than often result from rough editing session.")),(0,i.kt)("h3",{id:"max-lines-between-notes"},(0,i.kt)("inlineCode",{parentName:"h3"},"max-lines-between-notes")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: max-lines-between-notes\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{6,16}","{6,16}":!0},"# Example\n\n\n\n\n## Note: One\n\nThis is the first note.\n\n## Note: Two\n\nThis is the second note.\n\n\n\n## Note: Three\n\nThis is the third note.\n\n\n## Note: Four\nThis is the fourth note.\n\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"max-lines-between-notes")," to avoid too many blank spaces between notes.")),(0,i.kt)("h3",{id:"note-title-match"},(0,i.kt)("inlineCode",{parentName:"h3"},"note-title-match")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},'rules:\n- name: note-title-match\n  args:\n  - "^(Note|Reference):\\s\\S.*$"\n')),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{7}","{7}":!0},"# Example\n\n## Reference: Example\n\nA title matching the regular expression `(Reference|...):\\s\\S.*`.\n\n## reference: Example\n\nThe kind is in lowercase (allowed but enforced by the linter).\n\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"note-title-match")," to apply naming conventions on your notes.")),(0,i.kt)("h3",{id:"no-free-note"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-free-note")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-free-note\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{3}","{3}":!0},"# Example\n\n## A free note\n\nThis is a free note.\n\n## Note: A typed note\n\nThis is a typed note.\n\n## Cheatsheet: Another typed note\n\nThis is another typed note.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-free-note")," to catch notes that are wrongly or not typed.")),(0,i.kt)("h3",{id:"no-dangling-media"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-dangling-media")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-dangling-media\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{3,5}","{3,5}":!0},"# Example\n\n![Missing directory](pic.jpeg)\n![OK](no-dangling-media/pic.jpeg)\n![Wrong extension](no-dangling-media/pic.jpg)\n![OK](no-dangling-media/../no-dangling-media/pic.jpeg)\n![OK](./no-dangling-media/pic.jpeg)\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-dangling-media")," to ensure links to medias are correctly resolved.")),(0,i.kt)("h3",{id:"no-dead-wikilink"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-dead-wikilink")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-dead-wikilink\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=no-dead-wikilink.md {5,7}",title:"no-dead-wikilink.md","{5,7}":!0},"# Example\n\n## Note: A\n\n[[#B]]\n[[#Note: B]]\n[[unknown.md]]\n\n## Note: B\n\n[[no-dead-wikilink.md#Note: A]]\n[[no-dead-wikilink#Note: A]]\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-dead-wikilink")," to ensure links are not dead (useful after renaming for example).")),(0,i.kt)("h3",{id:"no-extension-wikilink"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-extension-wikilink")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-extension-wikilink\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"title=no-extension-wikilink.md {9,17}",title:"no-extension-wikilink.md","{9,17}":!0},"# Example\n\n## Note: Link 1\n\n[[no-extension-wikilink#Note: Link 2]]\n\n## Note: Link 2\n\n[[no-extension-wikilink.md#Note: Link 1]]\n\n## Note: Link 3\n\n[[no-extension-wikilink]]\n\n## Note: Link 4\n\n[[no-extension-wikilink.md]]\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-extension-wikilink")," to keep your internal links as short as possible.")),(0,i.kt)("h3",{id:"no-ambiguous-wikilink"},(0,i.kt)("inlineCode",{parentName:"h3"},"no-ambiguous-wikilink")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: no-ambiguous-wikilink\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{3}","{3}":!0},"# Example\n\n[[books.md]]\n[[notes/books.md]]\n[[reviews/books.md]]\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"no-ambiguous-wikilink")," to ensure links are explicit and can be followed properly.")),(0,i.kt)("h3",{id:"require-quote-tag"},(0,i.kt)("inlineCode",{parentName:"h3"},"require-quote-tag")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},'rules:\n- name: require-quote-tag\n  args:\n  - "^(life|favorite)$"\n')),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{7,14}","{7,14}":!0},"# Example\n\n## Note: A Note\n\nOnly quotes are concerned by this rule.\n\n## Quote: No Tag\n\n`@name: Anonymous`\n\nThis is the first quote.\n\n\n## Quote: Tag\n\n`@name: Anonymous`\n`#useless`\n\nThis is the second quote.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"require-quote-tag")," to enforce all quotes have tags and use the argument to limit the list of required tags.")),(0,i.kt)("h3",{id:"check-attribute"},(0,i.kt)("inlineCode",{parentName:"h3"},"check-attribute")),(0,i.kt)("p",null,"Configuration:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"rules:\n- name: check-attribute\n\nschemas:\n\n- name: Quotes\n  kind: quote\n  path: references\n  attributes:\n    - name: name\n      aliases: [author, illustrator]\n      type: string\n      required: true\n")),(0,i.kt)("p",null,"Example (with violations highlighted):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md",metastring:"{7}","{7}":!0},"# Example\n\n## Note: Marcus Aurelius On Others\n\n> What\u2019s bad for the hive is bad for the bee.\n\n## Quote: Summum Bonum\n\nJust that you do the right thing.\n\n## Quote: Memento Mori\n\n`@author: Marcus Aurelius`\n\nYou could leave life right now. Let that determine what you do and say and think.\n")),(0,i.kt)("admonition",{type:"tip"},(0,i.kt)("p",{parentName:"admonition"},"Use the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"check-attribute")," to ensure all values are valid and consistent between notes.")),(0,i.kt)("h2",{id:"schemas"},"Schemas"),(0,i.kt)("p",null,"Schemas are used to defined attributes and must follow this structure:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml",metastring:"title=.nt/lint",title:".nt/lint"},"schemas:\n\n- name: Quotes          # A name used when reporting violations\n  kind: quote           # Restriction on the note kinds\n  path: references      # Restriction on the note path (glob pattern)\n  attributes:           # Define a list of attributes\n    - name: name        # The attribute name\n      aliases: [author] # Optional aliases for the attribute name\n      type: string      # One of: array, string (default), boolean, number, object\n      required: true    # Mandatory? (default: false)\n      inherit: true     # Attribute is inheritable by sub-notes? (default: true)\n")),(0,i.kt)("p",null,"Default schemas (important for the inner working of the application) are predefined:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"schemas:\n\n  - name: Hooks\n    attributes:\n    - name: hook\n      type: array\n      inherit: false\n\n  - name: Tags\n    attributes:\n      - name: tags\n        type: array\n\n  - name: Relations\n    attributes:\n      - name: source\n        inherit: false\n      - name: references\n        type: array\n      - name: inspirations\n        type: array\n")),(0,i.kt)("p",null,"Declaring attributes as ",(0,i.kt)("inlineCode",{parentName:"p"},"array")," is convenient as value will automatically be appended to existing values:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-md"},"---\ntags: life # Same as tags: [life]\n---\n\n# A Note\n\n`@tag: life-changing`\n\nThis note will have the tags `#life` and `#life-changing`.\n")),(0,i.kt)("admonition",{type:"caution"},(0,i.kt)("p",{parentName:"admonition"},"Schemas are only enforced when enabling the rule ",(0,i.kt)("inlineCode",{parentName:"p"},"check-attribute"),".")))}p.isMDXComponent=!0}}]);