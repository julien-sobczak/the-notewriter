"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4897],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=i,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:2},a="Principles",s={unversionedId:"developers/principles",id:"developers/principles",title:"Principles",description:"The NoteWriter is a side project. Decisions are important when time is limited. Here are a few principles:",source:"@site/docs/developers/principles.md",sourceDirName:"developers",slug:"/developers/principles",permalink:"/the-notewriter/docs/developers/principles",draft:!1,editUrl:"https://github.com/julien-sobczak/the-notewriter/tree/main/website/docs/developers/principles.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"documentationSidebar",previous:{title:"Presentation",permalink:"/the-notewriter/docs/developers/presentation"},next:{title:"Contributing",permalink:"/the-notewriter/docs/developers/contributing"}},p={},l=[{value:"Minimal Dependencies",id:"minimal-dependencies",level:2},{value:"Minimal Integrations",id:"minimal-integrations",level:2}],c={toc:l},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"principles"},"Principles"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The NoteWriter")," is a side project. Decisions are important when time is limited. Here are a few principles:"),(0,i.kt)("h2",{id:"minimal-dependencies"},"Minimal Dependencies"),(0,i.kt)("p",null,"All dependencies have a cost. The dependency needs to be updated, and eventually replaced when obsolete."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"The dependencies between components in a design should be in the direction of stability of the components. A package should only depend upon packages that are more stable than it is."),(0,i.kt)("p",{parentName:"blockquote"},"\u2014 ",(0,i.kt)("em",{parentName:"p"},"Stable Dependencies Principle")," (DSP)")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The NoteWriter")," is expected to be stable, adding new features sparingly. Dependencies must be chosen wisely, finding the right balance between the gain (= the number of lines of code we don't need to write) versus the cost (= the time required to update/contribute/deprecate/replace a dependency)."),(0,i.kt)("h2",{id:"minimal-integrations"},"Minimal Integrations"),(0,i.kt)("p",null,"As a codebase grows over time, the number of lines of code between the core logic and the various integrations (ex: support different source formats, export to different applications, support different storage solutions, etc) evolves differently. The core logic remains stable when the number of integrations continue to grow (= more line to write and maintain)."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"The NoteWriter")," is not a general tool. It focus on developers working with Git and hosting their repositories on a platform like GitHub (= most of developers). The goal is to have a codebase where the core logic represents the majority of the lines of code."))}u.isMDXComponent=!0}}]);